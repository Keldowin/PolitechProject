from func import *
from cfg import TOKEN
from ui_text import *

import logging
import sqlite3
#import datetime
#import locale
#locale.setlocale(locale.LC_TIME, 'ru_RU')

import sys
import pathlib
script_path = pathlib.Path(sys.argv[0]).parent  # –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–æ –∫–∞—Ç–∞–ª–æ–≥–∞, –≥–¥–µ –ª–µ–∂–∏—Ç —Å–∫—Ä–∏–ø—Ç

#–ì–ª–∞–≤–Ω—ã–µ –±–∏–±–ª–µ–æ—Ç–µ–∫–∏

#–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∏–±–ª–µ–æ—Ç–µ–∫–∏
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

#Caps = const
logging.basicConfig(level=logging.INFO)
#===SQLite connect===#
try:
    db = sqlite3.connect(script_path / "qldb.db")
    sql = db.cursor()
except sqlite3.Error as error:
    print("Error", error)
#===SQLite connect===#
bot = Bot(TOKEN) #–ë–æ—Ç—É –ø–µ—Ä–µ–¥–∞—ë–º —Ç–æ–∫–µ–Ω
dp = Dispatcher(bot,storage=MemoryStorage()) #–î–∏—Å–ø–µ—Ç—á–µ—Ä—É –ø–µ—Ä–µ–¥–∞—ë–º –±–æ—Ç–∞

#Help –º–µ–Ω—é
@dp.message_handler(commands=['help'])
async def help_handler(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,text=UI_TEXT_HelpCommand,parse_mode='HTML')
 
#–ú–µ–Ω—é
@dp.message_handler(commands=['menu','start'])
async def main_menu(message: types.Message):
    userid = message.from_user.id #—É–∑–Ω–∞—ë–º —é–∑–µ—Ä –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    #–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Ä–µ–≥–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if cheak_registration(userid):
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('–¢–µ—Ä–º–∏–Ω—ã üîñ',callback_data="Hello"),InlineKeyboardButton('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ üìñ',callback_data="Hello"))
        keyboard.add(InlineKeyboardButton('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üë®‚Äçüíª',url="https://www.youtube.com/"))
        #MenuKeyborad.add(KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤'))
    else:
        user_registration(userid)
        await main_menu(message)

    await message.answer(text=UI_TEXT_MenuCommand,reply_markup=keyboard,parse_mode='HTML')

if __name__ == '__main__':
    executor.start_polling(dp)