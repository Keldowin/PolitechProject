from func import *
from cfg import TOKEN
from ui_text import *

import logging
import sqlite3
import time
#import datetime
#import locale
#locale.setlocale(locale.LC_TIME, 'ru_RU')

import sys
import pathlib
script_path = pathlib.Path(sys.argv[0]).parent  # –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–æ –∫–∞—Ç–∞–ª–æ–≥–∞, –≥–¥–µ –ª–µ–∂–∏—Ç —Å–∫—Ä–∏–ø—Ç

#–ì–ª–∞–≤–Ω—ã–µ –±–∏–±–ª–µ–æ—Ç–µ–∫–∏

#–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∏–±–ª–µ–æ—Ç–µ–∫–∏
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

#Caps = const
logging.basicConfig(level=logging.INFO)
#===SQLite connect===#
try:
    db = sqlite3.connect(script_path / "qldb.db")
    sql = db.cursor()
except sqlite3.Error as error:
    print("Error", error)
#===SQLite connect===#
bot = Bot(TOKEN) #–ë–æ—Ç—É –ø–µ—Ä–µ–¥–∞—ë–º —Ç–æ–∫–µ–Ω
dp = Dispatcher(bot,storage=MemoryStorage()) #–î–∏—Å–ø–µ—Ç—á–µ—Ä—É –ø–µ—Ä–µ–¥–∞—ë–º –±–æ—Ç–∞

keyboardM = InlineKeyboardMarkup()
keyboardM.add(InlineKeyboardButton('–ü–æ–∏—Å–∫ —Ç–µ—Ä–º–∏–Ω–∞ üîç',callback_data="TerminSerch"),InlineKeyboardButton('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤ üìñ',callback_data="Learn"))
keyboardM.add(InlineKeyboardButton('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üë®‚Äçüíª',url="https://www.youtube.com/"))

#Help –º–µ–Ω—é
@dp.message_handler(commands=['help'])
async def help_handler(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,text=UI_TEXT_HelpCommand,parse_mode='HTML')
 
#–ú–µ–Ω—é
@dp.message_handler(commands=['menu','start'])
async def main_menu(message: types.Message):
    userid = message.from_user.id #—É–∑–Ω–∞—ë–º —é–∑–µ—Ä –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    #–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Ä–µ–≥–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if cheak_registration(userid):
        pass
    else:
        user_registration(userid)
        await main_menu(message)

    await message.answer(text=UI_TEXT_MenuCommand,reply_markup=keyboardM,parse_mode='HTML')

class TerminSerch(StatesGroup):
    waiting_for_input = State()
    end = 0

@dp.callback_query_handler(lambda c: c.data == 'TerminSerch')
async def TerminSerchMethod(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,f"–í–≤–µ–¥–∏—Ç–µ <b>—Ç–µ—Ä–º–∏–Ω</b>, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏",parse_mode='HTML')
    await TerminSerch.waiting_for_input.set()
    TerminSerch.end = 0

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
@dp.message_handler(state=TerminSerch.waiting_for_input)
async def OutPutSerch(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    SerchInput = message.text
    SerchInput = SerchInput.capitalize()
    if TerminSerch.end != 1:
        # –ò—â–µ–º –≤ –±–¥
        SerchFunc = sql.execute(f'SELECT `id`,`Termens_short` FROM `Termens` WHERE lower(`Termens_short`) LIKE "%{SerchInput}%"')
        SerchFunc = SerchFunc.fetchall()
        if not SerchFunc:
            await bot.send_message(chat_id=message.from_user.id,text="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –∑–∞–Ω–æ–≤–æ")
            TerminSerch.end = 0
        else:
            keyboard = InlineKeyboardMarkup()
            for i in range(len(SerchFunc)):
                TerminId = str(SerchFunc[i][0])
                TerminShortName = SerchFunc[i][1]
                keyboard.add(InlineKeyboardButton(TerminShortName,callback_data="Termin_"+TerminId))
            TerminSerch.end = 1
            await bot.send_message(chat_id=message.chat.id,text="–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏:",reply_markup=keyboard,parse_mode='HTML')
    await state.finish()

#–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('Termin_'))
async def process_callback_button_dz(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    Termin_id = callback_query.data.split('_')[1]
    TerminData = get_termin(Termin_id)
    if TerminData:
        await callback_query.message.answer(text=f"‚ñ™ <u><b>{TerminData[0][0]}</b></u>\n\n{TerminData[0][1]}",parse_mode='HTML')
        TerminSerch.end = 1
    else:
        await callback_query.message.answer(text=f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –∑–∞–Ω–æ–≤–æ")
        TerminSerch.end = 0
    
    

if __name__ == '__main__':
    executor.start_polling(dp)