from func import *
from cfg import TOKEN
from ui_text import *

import logging
import sqlite3
import time
from random import randint
import textwrap
#import datetime
#import locale
#locale.setlocale(locale.LC_TIME, 'ru_RU')

import sys
import pathlib
script_path = pathlib.Path(sys.argv[0]).parent  # –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–æ –∫–∞—Ç–∞–ª–æ–≥–∞, –≥–¥–µ –ª–µ–∂–∏—Ç —Å–∫—Ä–∏–ø—Ç

#–ì–ª–∞–≤–Ω—ã–µ –±–∏–±–ª–µ–æ—Ç–µ–∫–∏

#–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∏–±–ª–µ–æ—Ç–µ–∫–∏
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import markdown

#Caps = const
logging.basicConfig(level=logging.INFO)
#===SQLite connect===#
try:
    db = sqlite3.connect(script_path / "qldb.db")
    sql = db.cursor()
except sqlite3.Error as error:
    print("Error", error)
#===SQLite connect===#
bot = Bot(TOKEN) #–ë–æ—Ç—É –ø–µ—Ä–µ–¥–∞—ë–º —Ç–æ–∫–µ–Ω
dp = Dispatcher(bot,storage=MemoryStorage()) #–î–∏—Å–ø–µ—Ç—á–µ—Ä—É –ø–µ—Ä–µ–¥–∞—ë–º –±–æ—Ç–∞

keyboardM = InlineKeyboardMarkup()
keyboardM.add(InlineKeyboardButton('–ü–æ–∏—Å–∫ —Ç–µ—Ä–º–∏–Ω–∞ üîç',callback_data="TerminSerch"),InlineKeyboardButton('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤ üìñ',callback_data="Learn"))
keyboardM.add(InlineKeyboardButton('–ü–µ—Ä–µ–º–µ–Ω–∞ ‚õ±',callback_data='Memes'))
keyboardM.add(InlineKeyboardButton('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üë®‚Äçüíª',url="https://docs.google.com/forms/d/e/1FAIpQLSdQiqVmsf2WSlNUBf_PKS0sC2v_VQaHU38-XH0QWEU3Ct8KJA/viewform?usp=sf_link"))

#Help –º–µ–Ω—é
@dp.message_handler(commands=['help'])
async def help_handler(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,text=UI_TEXT_HelpCommand,parse_mode='HTML')
 
#–ú–µ–Ω—é
@dp.message_handler(commands=['menu','start'])
async def main_menu(message: types.Message, back_to = False):
    userid = message.from_user.id #—É–∑–Ω–∞—ë–º —é–∑–µ—Ä –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    #–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Ä–µ–≥–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if cheak_registration(userid):
        pass
    else:
        user_registration(userid)
        await main_menu(message)

    if back_to:
         await message.edit_text(text=UI_TEXT_MenuCommand,reply_markup=keyboardM,parse_mode='HTML')
    else:
        await message.answer(text=UI_TEXT_MenuCommand,reply_markup=keyboardM,parse_mode='HTML')

#–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é
@dp.callback_query_handler(lambda c: c.data == 'Menu')
async def ReturnToMenu(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await main_menu(callback_query.message, True)

#–§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –º–µ–º–æ–≤ (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤)
@dp.callback_query_handler(lambda c: c.data == 'Memes')
async def SendMemes(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    #–î–æ—Å—Ç–∞—ë–º —Ä–∞–Ω–¥–æ–º–Ω–æ –º–µ–º
    GetMeme = sql.execute('SELECT `MemesPath` FROM `Memes`')
    GetMeme = GetMeme.fetchall()
    RandomId = randint(1, len(GetMeme))
    photo = InputFile("Memes/"+GetMeme[RandomId][0])

    #–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–º–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∏–π –º–µ–º üòÅ',callback_data='NextMeme_'+str(RandomId)))

    await bot.send_photo(chat_id=callback_query.message.chat.id,photo=photo,reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('NextMeme_'))
async def process_callback_button_dz(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    LastId = int(callback_query.data.split('_')[1])
    GetMeme = sql.execute('SELECT `MemesPath` FROM `Memes`')
    GetMeme = GetMeme.fetchall()

    RandomId = randint(1, len(GetMeme))
    while RandomId == LastId:
        RandomId = randint(1, len(GetMeme))
    photo = InputFile("Memes/"+GetMeme[RandomId][0])

    #–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–º–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∏–π –º–µ–º üòÅ',callback_data='NextMeme_'+str(RandomId)))

    await bot.send_photo(chat_id=callback_query.message.chat.id,photo=photo,reply_markup=keyboard)

@dp.message_handler(commands=['termin'])
async def termincommand(message: types.Message):
    await bot.send_message(message.from_user.id,f"–í–≤–µ–¥–∏—Ç–µ <b>—Ç–µ—Ä–º–∏–Ω</b>, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏",parse_mode='HTML')
    await TerminSerch.waiting_for_input.set()
    TerminSerch.end = 0 

class TerminSerch(StatesGroup):
    waiting_for_input = State()
    end = 0

@dp.callback_query_handler(lambda c: c.data == 'TerminSerch')
async def TerminSerchMethod(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,f"–í–≤–µ–¥–∏—Ç–µ <b>—Ç–µ—Ä–º–∏–Ω</b>, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏",parse_mode='HTML')
    await TerminSerch.waiting_for_input.set()
    TerminSerch.end = 0

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
@dp.message_handler(state=TerminSerch.waiting_for_input)
async def OutPutSerch(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    SerchInput = message.text
    SerchInput = SerchInput.capitalize()
    if TerminSerch.end != 1:
        # –ò—â–µ–º –≤ –±–¥
        SerchFunc = sql.execute(f'SELECT `id`,`Termens_short` FROM `Termens` WHERE lower(`Termens_short`) LIKE "%{SerchInput}%"')
        SerchFunc = SerchFunc.fetchall()
        if not SerchFunc:
            await bot.send_message(chat_id=message.from_user.id,text="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –∑–∞–Ω–æ–≤–æ /termin")
            TerminSerch.end = 0
        else:
            keyboard = InlineKeyboardMarkup()
            for i in range(len(SerchFunc)):
                TerminId = str(SerchFunc[i][0])
                TerminShortName = SerchFunc[i][1]
                keyboard.add(InlineKeyboardButton(TerminShortName,callback_data="Termin_"+TerminId))
            TerminSerch.end = 1
            keyboard.add(InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é',callback_data='Menu'))
            await bot.send_message(chat_id=message.chat.id,text="–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏:",reply_markup=keyboard,parse_mode='HTML')
    await state.finish()

#–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('Termin_'))
async def process_callback_button_dz(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    Termin_id = callback_query.data.split('_')[1]
    TerminData = get_termin(Termin_id)
    if TerminData:
        ShortTermin = TerminData[0][0]
        keyborad = InlineKeyboardMarkup()
        keyborad.add(InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É',callback_data='BackSerch_'+ShortTermin[0]))
        await callback_query.message.edit_text(text=f"‚ñ™ <u><b>{TerminData[0][0]}</b></u>\n\n{TerminData[0][1]}",parse_mode='HTML',reply_markup=keyborad)
        TerminSerch.end = 1
    else:
        await callback_query.message.answer(text=f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –∑–∞–Ω–æ–≤–æ /termin")
        TerminSerch.end = 0
    
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('BackSerch_'))
async def process_callback_button_dz(callback_query: types.CallbackQuery):
    #–ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –ø—Ä–æ—à–ª–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ –Ω–µ–π —Å–æ—Å—Ç–∞–≤—è–ª–µ–º –∑–∞—Ä–Ω–æ–≤–æ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    FirstLetter = callback_query.data.split('_')[1]

    SerchInput = FirstLetter
    # –ò—â–µ–º –≤ –±–¥
    SerchFunc = sql.execute(f'SELECT `id`,`Termens_short` FROM `Termens` WHERE lower(`Termens_short`) LIKE "%{SerchInput}%"')
    SerchFunc = SerchFunc.fetchall()
    if not SerchFunc:
        await bot.send_message(text="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –∑–∞–Ω–æ–≤–æ /termin")
    else:
        keyboard = InlineKeyboardMarkup()
        for i in range(len(SerchFunc)):
            TerminId = str(SerchFunc[i][0])
            TerminShortName = SerchFunc[i][1]
            keyboard.add(InlineKeyboardButton(TerminShortName,callback_data="Termin_"+TerminId))

        keyboard.add(InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é',callback_data='Menu'))
        await callback_query.message.edit_text(text="–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏:",reply_markup=keyboard,parse_mode='HTML')

#–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤
@dp.callback_query_handler(lambda c: c.data == 'Learn')
async def TerminSerchMethod(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    
    await generate_test(callback_query)

#–í—ã–¥–∞—ë–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ—Ä–º–∏–Ω
@dp.callback_query_handler(lambda c: c.data == 'NextTermin')
async def TerminSerchMethod(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await generate_test(callback_query)

#–í—ã–¥–∞—ë–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('FullTermin_'))
async def CheckFullTermin(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    TerminRand = callback_query.data.split('_')[1] #–ü–æ–ª—É—á–∞–µ–º –∞–π–¥–∏ –∏–∑ TerminRand

    #–í—ã–≤–æ–¥–∏–º –∏ —Ç–µ—Ä–º–∏–Ω –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    Termin = get_termin(TerminRand)
    if Termin:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∏–π —Ç–µ—Ä–º–∏–Ω ‚û°',callback_data='NextTermin'))
        keyboard.add(InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é',callback_data='Menu'))
        TerminText = f"–¢–µ—Ä–º–∏–Ω:\n<u><b>{Termin[0][0]}</b></u>\n\n–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {Termin[0][1]}"
        await callback_query.message.edit_text(text=TerminText,reply_markup=keyboard,parse_mode='HTML')

@dp.callback_query_handler(lambda c: c.data == 'TrueAnswer')
async def TerminSerchMethod(callback_query: types.CallbackQuery):
    await callback_query.answer(text="–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚úî",show_alert=True)
    
    await generate_test(callback_query)

@dp.callback_query_handler(lambda c: c.data == 'FalseAnswer')
async def TerminSerchMethod(callback_query: types.CallbackQuery):
    await callback_query.answer(text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚ùå",show_alert=True)
    await TerminSerchMethod(callback_query)

if __name__ == '__main__':
    executor.start_polling(dp)